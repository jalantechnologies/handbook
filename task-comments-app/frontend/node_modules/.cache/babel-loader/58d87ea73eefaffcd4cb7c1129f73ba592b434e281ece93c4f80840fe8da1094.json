{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for debugging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const commentAPI = {\n  // Get all comments for a task\n  getComments: taskId => api.get(`/tasks/${taskId}/comments`),\n  // Create a new comment\n  createComment: (taskId, commentData) => api.post(`/tasks/${taskId}/comments`, commentData),\n  // Get a single comment\n  getComment: commentId => api.get(`/comments/${commentId}`),\n  // Update a comment\n  updateComment: (commentId, commentData) => api.put(`/comments/${commentId}`, commentData),\n  // Delete a comment\n  deleteComment: commentId => api.delete(`/comments/${commentId}`)\n};\n\n// Mock task API (since we don't have tasks in backend yet)\nexport const taskAPI = {\n  getTasks: () => Promise.resolve({\n    data: {\n      success: true,\n      data: [{\n        id: 1,\n        title: 'Setup Project Structure',\n        status: 'completed',\n        description: 'Create the basic folder structure and files'\n      }, {\n        id: 2,\n        title: 'Implement Backend APIs',\n        status: 'in-progress',\n        description: 'Build CRUD APIs for comments'\n      }, {\n        id: 3,\n        title: 'Build Frontend Interface',\n        status: 'pending',\n        description: 'Create React components for task management'\n      }, {\n        id: 4,\n        title: 'Add Authentication',\n        status: 'pending',\n        description: 'Implement user authentication system'\n      }, {\n        id: 5,\n        title: 'Deploy Application',\n        status: 'pending',\n        description: 'Deploy to production environment'\n      }]\n    }\n  }),\n  getTask: taskId => {\n    const tasks = [{\n      id: 1,\n      title: 'Setup Project Structure',\n      status: 'completed',\n      description: 'Create the basic folder structure and files'\n    }, {\n      id: 2,\n      title: 'Implement Backend APIs',\n      status: 'in-progress',\n      description: 'Build CRUD APIs for comments'\n    }, {\n      id: 3,\n      title: 'Build Frontend Interface',\n      status: 'pending',\n      description: 'Create React components for task management'\n    }, {\n      id: 4,\n      title: 'Add Authentication',\n      status: 'pending',\n      description: 'Implement user authentication system'\n    }, {\n      id: 5,\n      title: 'Deploy Application',\n      status: 'pending',\n      description: 'Deploy to production environment'\n    }];\n    const task = tasks.find(t => t.id === parseInt(taskId));\n    return Promise.resolve({\n      data: {\n        success: true,\n        data: task\n      }\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","message","commentAPI","getComments","taskId","get","createComment","commentData","post","getComment","commentId","updateComment","put","deleteComment","delete","taskAPI","getTasks","resolve","success","id","title","description","getTask","tasks","task","find","t","parseInt"],"sources":["C:/Users/hp/JobProject/handbook/task-comments-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for debugging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', config.method?.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const commentAPI = {\r\n  // Get all comments for a task\r\n  getComments: (taskId) => api.get(`/tasks/${taskId}/comments`),\r\n  \r\n  // Create a new comment\r\n  createComment: (taskId, commentData) => \r\n    api.post(`/tasks/${taskId}/comments`, commentData),\r\n  \r\n  // Get a single comment\r\n  getComment: (commentId) => api.get(`/comments/${commentId}`),\r\n  \r\n  // Update a comment\r\n  updateComment: (commentId, commentData) => \r\n    api.put(`/comments/${commentId}`, commentData),\r\n  \r\n  // Delete a comment\r\n  deleteComment: (commentId) => api.delete(`/comments/${commentId}`),\r\n};\r\n\r\n// Mock task API (since we don't have tasks in backend yet)\r\nexport const taskAPI = {\r\n  getTasks: () => Promise.resolve({\r\n    data: {\r\n      success: true,\r\n      data: [\r\n        { id: 1, title: 'Setup Project Structure', status: 'completed', description: 'Create the basic folder structure and files' },\r\n        { id: 2, title: 'Implement Backend APIs', status: 'in-progress', description: 'Build CRUD APIs for comments' },\r\n        { id: 3, title: 'Build Frontend Interface', status: 'pending', description: 'Create React components for task management' },\r\n        { id: 4, title: 'Add Authentication', status: 'pending', description: 'Implement user authentication system' },\r\n        { id: 5, title: 'Deploy Application', status: 'pending', description: 'Deploy to production environment' }\r\n      ]\r\n    }\r\n  }),\r\n  \r\n  getTask: (taskId) => {\r\n    const tasks = [\r\n      { id: 1, title: 'Setup Project Structure', status: 'completed', description: 'Create the basic folder structure and files' },\r\n      { id: 2, title: 'Implement Backend APIs', status: 'in-progress', description: 'Build CRUD APIs for comments' },\r\n      { id: 3, title: 'Build Frontend Interface', status: 'pending', description: 'Create React components for task management' },\r\n      { id: 4, title: 'Add Authentication', status: 'pending', description: 'Implement user authentication system' },\r\n      { id: 5, title: 'Deploy Application', status: 'pending', description: 'Deploy to production environment' }\r\n    ];\r\n    const task = tasks.find(t => t.id === parseInt(taskId));\r\n    return Promise.resolve({\r\n      data: { success: true, data: task }\r\n    });\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}